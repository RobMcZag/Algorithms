apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'cobertura'

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'com.robertozagni'
version = '0.1'


repositories {
    mavenLocal()
    mavenCentral()
    // jcenter()
    // maven { url "https://jitpack.io" } // for influxdb-java
    flatDir {
        dirs "$rootProject.projectDir/libs"
    }
}

dependencies {

    // Algorithms from Princeton
    compile files('libs/algs4.jar')
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    
    // Logging modules - Using the slf4j API to bind to Log4J
    compile group: 'org.slf4j', name:'slf4j-api', version:'1.7.13'  // API
    compile group: 'org.slf4j', name:'slf4j-log4j12', version:'1.7.13'  // Binding to Log4J

    // Testing
    testCompile 'junit:junit:4.11'
    // testCompile "org.mockito:mockito-core:1.+"
    
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.0'
    }
}

jar {
    baseName = 'algoritmi'
    manifest {
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(',') 
        attributes  'Implementation-Title': 'Algoritmi', 
                    'Implementation-Version': version,  
                    //, 'Main-Class': 'it.rz.algoritmi.MyLinkedList'
                    'Class-Path': manifestClasspath
    }
}

uploadArchives {
    repositories {
        mavenLocal()
    }
}
task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

checkstyle {
    ignoreFailures = true
    toolVersion = '6.9'     // default is 5.9
    configFile = rootProject.file('codequality/checkstyle.xml')
}
findbugs {
    ignoreFailures = true
    includeFilter = rootProject.file("codequality/findbugs.xml")
    //excludeFilter = rootProject.file("codequality/findbugsExcludeFilter.xml")
    // reportsDir = file("$project.buildDir/findbugsReports")
    
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
pmd {
    ignoreFailures = true 
}
cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}
